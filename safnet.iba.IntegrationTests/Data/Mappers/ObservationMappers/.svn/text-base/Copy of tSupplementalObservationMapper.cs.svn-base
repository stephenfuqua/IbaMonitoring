using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using safnet.iba.Data.Mappers;
using safnet.iba.Business.Entities;
using safnet.iba.Business.Entities.Observations;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace safnet.iba.NUnit.Data.Mappers
{
    /// <summary>
    /// Validates the database mapping functions of the <see cref="SupplementalObservationMapper"/> class.s
    /// </summary>
    [TestClass]
    public class tObservationMapper_Supplemental
    {
        #region Fields

        private Guid _supplementalObservationTypeId;

        #endregion

        #region Public Methods

        /// <summary>
        /// Sets up each test.
        /// </summary>
        [TestInitialize]
        public void SetUp()
        {
            DbTestHelper.ClearTable("Observation");
            DbTestHelper.ClearTable("SiteVisit");
            DbTestHelper.LoadLookupTypes();
            DbTestHelper.LoadSpecies();

            _supplementalObservationTypeId = (new SupplementalObservation()).ObservationTypeId;
        }

        /// <summary>
        /// Validates that the Delete function only deletes the specified record.
        /// </summary>
        [TestMethod]
        public void t_SupplementalObservation_Delete()
        {
            Observation_ado setupObject = null;
            // backdoor data setup
            DbTestHelper.LoadAdoObjects(delegate(IbaUnitTestEntities iba)
            {
                setupObject = new Observation_ado()
                {
                    Comments = "asdfasdf asdf adsfa dsfads fasdf adsfasd fadsf awefr34fr34r34 ",
                    ObservationId = DbTestHelper.TestGuid2,
                    SpeciesId = new Guid(DbTestHelper.SPECIES_1_ID),
                    EventId = DbTestHelper.TestGuid1,
                    ObservationTypeId = _supplementalObservationTypeId
                };
            });
            List<Observation_ado> Observationlist = DbTestHelper.LoadExtraneousObservations();

            ObservationMapper.Delete(new SupplementalObservation() { Id = setupObject.ObservationId });

            // Validate results
            using (IbaUnitTestEntities iba = new IbaUnitTestEntities())
            {
                var SupplementalObservationQuery = from SupplementalObservations in iba.Observation_ado
                                                   select SupplementalObservations;
                Assert.IsNotNull(SupplementalObservationQuery, "Query result is null");
                Assert.AreEqual(Observationlist.Count(), SupplementalObservationQuery.Count(), "Wrong number of results in query");
                validateExtraObservations(Observationlist, SupplementalObservationQuery);
            }
        }

        /// <summary>
        /// Validates that a new record can be saved correctly.
        /// </summary>
        [TestMethod]
        public void t_SupplementalObservation_Save_Insert()
        {
            loadSiteVisit(DbTestHelper.TestGuid1);
            SupplementalObservation supplemental = new SupplementalObservation()
            {
                Comments = "asdfasdf asdf adsfa dsfads fasdf adsfasd fadsf awefr34fr34r34 ",
                Id = DbTestHelper.TestGuid2,
                SpeciesCode = DbTestHelper.SPECIES_1_CODE,
                EventId = DbTestHelper.TestGuid1
            };
            ObservationMapper.Insert(supplemental);

            using (IbaUnitTestEntities iba = new IbaUnitTestEntities())
            {
                var SupplementalObservationQuery = from SupplementalObservations in iba.Observation_ado select SupplementalObservations;
                Assert.IsNotNull(SupplementalObservationQuery, "Query result is null");
                Assert.AreEqual(1, SupplementalObservationQuery.Count(), "Wrong number of results in query");
                Observation_ado adoSupplementalObservation = SupplementalObservationQuery.First();
                validateObjectEquality(supplemental, adoSupplementalObservation, iba);
            }
        }

        /// <summary>
        /// Validates that update of an existing record works and doesn't update any other records.s
        /// </summary>
        [TestMethod]
        public void t_SupplementalObservation_Save_Update()
        {
            loadSiteVisit(DbTestHelper.TestGuid1);
            Observation_ado setupObject = null;
            // backdoor data setup
            DbTestHelper.LoadAdoObjects(delegate(IbaUnitTestEntities iba)
            {
                setupObject = new Observation_ado()
                {
                    Comments = "asdfasdf asdf adsfa dsfads fasdf adsfasd fadsf awefr34fr34r34 ",
                    ObservationId = DbTestHelper.TestGuid2,
                    SpeciesId = new Guid(DbTestHelper.SPECIES_1_ID),
                    EventId = DbTestHelper.TestGuid1,
                    ObservationTypeId = _supplementalObservationTypeId
                };
            });
            List<Observation_ado> extraList = DbTestHelper.LoadExtraneousObservations();

            // Setup object to be saved. Change everything except the Id.
            SupplementalObservation testObject = new SupplementalObservation()
            {
                Comments = "hurdy gurdy",
                SpeciesCode = DbTestHelper.SPECIES_2_CODE,
                EventId = setupObject.EventId,
                Id = setupObject.ObservationId
            };

            // Execute the test
            ObservationMapper.Update(testObject);

            // Validate results
            using (IbaUnitTestEntities iba = new IbaUnitTestEntities())
            {
                var SupplementalObservationQuery = from SupplementalObservations in iba.Observation_ado select SupplementalObservations;
                Assert.IsNotNull(SupplementalObservationQuery, "Query result is null");
                Assert.AreEqual(extraList.Count() + 1, SupplementalObservationQuery.Count(), "Wrong number of results in query");

                Observation_ado adoSupplementalObservation = SupplementalObservationQuery.First(x => x.ObservationId == setupObject.ObservationId);
                validateObjectEquality(testObject, adoSupplementalObservation, iba);

                validateExtraObservations(extraList, SupplementalObservationQuery);
            }
        }

        /// <summary>
        /// Validates selection of all SupplementalObservation objects in the database.
        /// </summary>
        [TestMethod]
        public void t_SupplementalObservation_Select_All()
        {
            // Backdoor setup
            List<Observation_ado> list = DbTestHelper.LoadExtraneousObservations();
            List<Observation_ado> SupplementalObservationAdoList = extraSupplementalObservations(list);

            // Exercise the test
            List<SupplementalObservation> SupplementalObservationList = ObservationMapper.SelectAll<SupplementalObservation>();

            // Validate results
            Assert.AreEqual(SupplementalObservationAdoList.Count(), SupplementalObservationList.Count, "Wrong number of objects in the result list");
            foreach (Observation_ado ado in SupplementalObservationAdoList)
            {
                // just check to make sure the object is there; leave specific value check for the Select_ByGuid test
                Assert.IsTrue(SupplementalObservationList.Exists(x => x.Id.Equals(ado.ObservationId)), "Observation " + ado.ObservationId.ToString() + " is not in the results");
            }
        }

        /// <summary>
        /// Validates that the Selection of a SupplementalObservation by EventId returns only the expected value.
        /// </summary>
        [TestMethod]
        public void t_SupplementalObservation_Select_ByEventId()
        {
            Observation_ado setupObject = null;
            // backdoor data setup
            DbTestHelper.LoadAdoObjects(delegate(IbaUnitTestEntities iba)
            {
                setupObject = new Observation_ado()
                {
                    Comments = "asdfasdf asdf adsfa dsfads fasdf adsfasd fadsf awefr34fr34r34 ",
                    ObservationId = DbTestHelper.TestGuid2,
                    SpeciesId = new Guid(DbTestHelper.SPECIES_1_ID),
                    EventId = DbTestHelper.TestGuid1,
                    ObservationTypeId = _supplementalObservationTypeId
                };
            });
            DbTestHelper.LoadExtraneousObservations();

            // Exercise the test
            List<SupplementalObservation> selectList = ObservationMapper.SelectAllForEvent<SupplementalObservation>(setupObject.EventId);
            Assert.AreEqual(1, selectList.Count(), "Does not contain just one object");
            SupplementalObservation result = selectList[0];

            using (IbaUnitTestEntities iba = new IbaUnitTestEntities())
            {
                validateObjectEquality(result, setupObject, iba);
            }
        }

        /// <summary>
        /// Validates than an exception is thrown if an empty Guid is passed to the main Select function.
        /// </summary>
        [TestMethod]
        [ExpectedException(typeof(IbaArgumentException))]
        public void t_SupplementalObservation_Select_ByGuid_Empty()
        {
            ObservationMapper.Select<SupplementalObservation>(Guid.Empty);
        }

        /// <summary>
        /// Validates selection of a SupplementalObservation object by unique identifier.
        /// </summary>
        [TestMethod]
        public void t_SupplementalObservation_Select_ByGuid()
        {
            Observation_ado setupObject = null;
            // backdoor data setup
            DbTestHelper.LoadAdoObjects(delegate(IbaUnitTestEntities iba)
            {
                setupObject = new Observation_ado()
                {
                    Comments = "asdfasdf asdf adsfa dsfads fasdf adsfasd fadsf awefr34fr34r34 ",
                    ObservationId = DbTestHelper.TestGuid2,
                    SpeciesId = new Guid(DbTestHelper.SPECIES_1_ID),
                    EventId = DbTestHelper.TestGuid1,
                    ObservationTypeId = _supplementalObservationTypeId
                };
            });
            DbTestHelper.LoadExtraneousObservations();

            // Exercise the test
            SupplementalObservation SupplementalObservation = ObservationMapper.Select<SupplementalObservation>(setupObject.ObservationId);

            using (IbaUnitTestEntities iba = new IbaUnitTestEntities())
            {
                validateObjectEquality(SupplementalObservation, setupObject, iba);
            }
        }

        /// <summary>
        /// Validates that a call to the Select_ByPointSurveyId function throws an error if a null value is passed to it.
        /// </summary>
        [TestMethod]
        [ExpectedException(typeof(IbaArgumentException))]
        public void t_SupplementalObservation_Select_ByPointSurveyId_Empty()
        {
            // Exercise the test
            List<SupplementalObservation> SupplementalObservation = ObservationMapper.SelectAllForEvent<SupplementalObservation>(Guid.Empty);
        }

        #endregion

        #region Private Methods

        private List<Observation_ado> extraSupplementalObservations(List<Observation_ado> list)
        {
            List<Observation_ado> SupplementalObservationAdoList = list.FindAll(n => n.ObservationTypeId.Equals(_supplementalObservationTypeId));
            return SupplementalObservationAdoList;
        }

        private static void loadSiteVisit(Guid visitGuid)
        {
            DbTestHelper.LoadAdoObjects((IbaUnitTestEntities iba) =>
                {
                    SiteVisit_ado visit = SiteVisit_ado.CreateSiteVisit_ado(visitGuid, false, DbTestHelper.TestGuid2, DateTime.Now, DateTime.Now);
                    iba.AddToSiteVisit_ado(visit);
                });
        }

        private void validateExtraObservations(List<Observation_ado> extraList, IQueryable<Observation_ado> SupplementalObservationQuery)
        {
            foreach (Observation_ado extra in extraSupplementalObservations(extraList))
            {
                Observation_ado result = SupplementalObservationQuery.First(x => x.ObservationId == extra.ObservationId);
                Assert.IsNotNull(result, "There is no longer an object with id " + extra.ObservationId.ToString());
                Assert.AreEqual(extra.Comments, result.Comments, "Comments for id " + extra.ObservationId.ToString());
                Assert.AreEqual(extra.EventId, result.EventId, "EventId for id " + extra.ObservationId.ToString());
                Assert.AreEqual(extra.ObservationTypeId, result.ObservationTypeId, "ObservationTypeId  for id " + extra.ObservationId.ToString());
                Assert.AreEqual(extra.SpeciesId, result.SpeciesId, "SpeciesId for id " + extra.ObservationId.ToString());
            }
        }

        private static void validateObjectEquality(SupplementalObservation supplemental, Observation_ado adoSupplementalObservation, IbaUnitTestEntities iba)
        {
            Assert.IsNotNull(adoSupplementalObservation, "There is no SupplementalObservation with the ID to test for");
            Assert.IsNotNull(adoSupplementalObservation.Comments, "ADO Comments are null");
            Assert.AreEqual(supplemental.Comments, adoSupplementalObservation.Comments, "Comments");
            Assert.AreEqual(supplemental.EventId, adoSupplementalObservation.EventId, "EventId");
            Assert.AreEqual(supplemental.Id, adoSupplementalObservation.ObservationId, "ObservationId");
            Assert.AreEqual(supplemental.ObservationTypeId, adoSupplementalObservation.ObservationTypeId, "ObservationTypeId");
            var speciesQuery = from specieses in iba.Species_ado where specieses.AlphaCode == supplemental.SpeciesCode select specieses.SpeciesId;
            Assert.AreEqual(speciesQuery.First().ToString(), adoSupplementalObservation.SpeciesId.ToString(), "SpeciesId");
        }

        #endregion

    }
}
